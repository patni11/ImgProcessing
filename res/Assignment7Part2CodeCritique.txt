Code Critique:

In terms of design, their code was pretty solid. They cleanly organize their model, view, and controller and the they create necessary and relevant interfaces appropriately throughout. Their model creates interfaces for images and storages, leaving out an interface for Pixel which makes sense in the context of this assignment. Their function object interface is implemented by all image modifications, and all make use of the standardized \'93execute function\'94. For their controllers, they set reasonable expectations across all ImageProcessing controllers, allowing both their text edit and GUI controller to implement it which is nice. The code is very extendable, beyond the private fields for the GUI, and is not limited in adding extra functionality. Their directories/folders are also clearly and cleanly laid out, so figuring out their environment was no trouble.\

Their implementation is also solid, just with a few implementation choices that can cause disruption for unfamiliar coders. For example, they have some macros (function objects) that take in the same parameters but in different order arbitrarily. This can cause confusion when you expect parameters of the macro class to be a certain way, but can apply the modifications to the wrong/non-existing images. They also pass the model in each execution of the image modification functions, instead of through its constructor. This may allow multi-storaging, but for this assignment it was a little bit of a confusing design choice.\

As far as documentation, there really is no complaints. Their README and USEME are nicely laid out and clear, making the process of understanding their implementation very easy. Their Javadocs also do a good job at linking together the needed objects across the project that are needed within this specific object, and their explanation headers were thorough. One thing that I would maybe add to the README would be their model design and its justification. The view and controller were included, but the design choices for the model as far as macro setup, the arguments passed into some of the functions were unclear, and it would have been appreciated in the README. Otherwise its really concise and an easy read.\

The strengths of their code would definitely be its simplicity in its ability to be understood by a third party. Their code is concise, and there are no unnecessary delegations to other classes or interfaces. They have interfaces for every kind of object, allowing a uniform way to represent objects across different classes, and to extend such objects. The interfaces themselves only offer baseline required functions, making extendability very convenient, as there isn't any unnecessary functions being passed along in the hierarchy that will not be needed. Their GUI is clear and nicely displayed in way that is user-friendly and is easily usable. Lastly, their error handling is thorough, and they have suitable images which made the debugging process very easy.\

Some suggestions for the code would definitely be to delegate some functionality to helpers. It can be hard to understand some of the macro execution functions when all of the logic is being fit into one function. Delegating some of the work to appropriately named helpers may make the debugging process and the extension of functionality easier. Also, their functions that require a value have hardcoded values, instead of allowing user input. We would suggest to add text fields that allow someone to specify the amount they would like to brighten by, just as mosaic requires a seed count.